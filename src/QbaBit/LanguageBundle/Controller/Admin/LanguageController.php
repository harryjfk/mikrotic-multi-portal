<?php

namespace QbaBit\LanguageBundle\Controller\Admin;

use Doctrine\ORM\EntityManager;
use QbaBit\CoreBundle\Controller\Base\QbaBitCrudController;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\HttpFoundation\Request;

class LanguageController extends QbaBitCrudController
{

    public function navAction()
    {
        $entities = $this->getRepository()->findAll();
        return $this->render('QbaBitLanguageBundle:Admin\Language:_nav.html.twig', array_merge($this->additionalParams(),array( 'entities' => $entities)));

    }
    protected function getSearchForm()
    {
        $search = parent::getSearchForm();
        $search
            ->add('name', TextType::class, array( "required"=>false, 'label' => "qba_bit.language.fields.name", 'attr' => array('class' => 'form-control')))

        ;
        return $search;
    }
    protected function additionalParams($crud_mode = "list")
    {

        $parent = parent::additionalParams($crud_mode); // TODO: Change the autogenerated stub
        $primary = $this->get("qba_bit_core.language.utils")->getPrimaryLanguage();
        if (is_object($primary))
            $primary = $primary->getName();
        $parent["primary"] = $primary;
        return $parent;
    }
    protected function preFlush($object, EntityManager $em)
    {
        if ($object->getPrimary() == true)
            $this->get("qba_bit_core.language.utils")->setPrimaryLanguage($object->getShortCode());

    }
    protected function preEditRender($object)
    {
        $primary = $this->get("qba_bit_core.language.utils")->getPrimaryLanguage();
        $object->setPrimary($object->getName() == $primary->getName());
    }

    protected function getCurrentObject()
    {
        return "QbaBit\LanguageBundle\Entity\Language";
    }
    protected function canBeDeleted($object)
    {
        $primary = $this->get('qba_bit_core.language.utils')->getPrimaryLanguage();

        $t = $primary->getId() == $object->getId();
        if ($t)
            return $this->get('translator')->trans('qbabit.language.error.primary');
        return true;
    }
}
