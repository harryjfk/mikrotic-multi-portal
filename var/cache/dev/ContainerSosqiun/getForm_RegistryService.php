<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'form.registry' shared service.

return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\ServiceLocator(array('Liip\\ImagineBundle\\Form\\Type\\ImageType' => function () {
    return ${($_ = isset($this->services['liip_imagine.form.type.image']) ? $this->services['liip_imagine.form.type.image'] : $this->services['liip_imagine.form.type.image'] = new \Liip\ImagineBundle\Form\Type\ImageType()) && false ?: '_'};
}, 'QbaBit\\CoreBundle\\Form\\Base\\AccessBaseType' => function () {
    return ${($_ = isset($this->services['qba_bit_core.form.base']) ? $this->services['qba_bit_core.form.base'] : $this->services['qba_bit_core.form.base'] = new \QbaBit\CoreBundle\Form\Base\AccessBaseType($this)) && false ?: '_'};
}, 'QbaBit\\CoreBundle\\Form\\Modules\\ModalInstallModuleType' => function () {
    return ${($_ = isset($this->services['qba_bit_core.form.module.install_form']) ? $this->services['qba_bit_core.form.module.install_form'] : $this->services['qba_bit_core.form.module.install_form'] = new \QbaBit\CoreBundle\Form\Modules\ModalInstallModuleType($this)) && false ?: '_'};
}, 'QbaBit\\CoreBundle\\Form\\Modules\\SystemRestoreModuleType' => function () {
    return ${($_ = isset($this->services['qba_bit_core.form.system_restore.form']) ? $this->services['qba_bit_core.form.system_restore.form'] : $this->services['qba_bit_core.form.system_restore.form'] = new \QbaBit\CoreBundle\Form\Modules\SystemRestoreModuleType($this)) && false ?: '_'};
}, 'QbaBit\\CoreBundle\\Form\\Types\\Basic\\ButtonType' => function () {
    return ${($_ = isset($this->services['qba_bit_core.form.basic.button']) ? $this->services['qba_bit_core.form.basic.button'] : $this->services['qba_bit_core.form.basic.button'] = new \QbaBit\CoreBundle\Form\Types\Basic\ButtonType($this)) && false ?: '_'};
}, 'QbaBit\\CoreBundle\\Form\\Types\\Basic\\GeneralDateTimeType' => function () {
    return ${($_ = isset($this->services['qba_bit_core.form.basic.general-datetime']) ? $this->services['qba_bit_core.form.basic.general-datetime'] : $this->services['qba_bit_core.form.basic.general-datetime'] = new \QbaBit\CoreBundle\Form\Types\Basic\GeneralDateTimeType($this)) && false ?: '_'};
}, 'QbaBit\\CoreBundle\\Form\\Types\\Basic\\ModalProcessLoggerType' => function () {
    return ${($_ = isset($this->services['qba_bit_core.form.basic.process_logger']) ? $this->services['qba_bit_core.form.basic.process_logger'] : $this->services['qba_bit_core.form.basic.process_logger'] = new \QbaBit\CoreBundle\Form\Types\Basic\ModalProcessLoggerType($this)) && false ?: '_'};
}, 'QbaBit\\CoreBundle\\Form\\Types\\Basic\\SearchType' => function () {
    return ${($_ = isset($this->services['qba_bit_core.form.basic.search']) ? $this->services['qba_bit_core.form.basic.search'] : $this->services['qba_bit_core.form.basic.search'] = new \QbaBit\CoreBundle\Form\Types\Basic\SearchType($this)) && false ?: '_'};
}, 'QbaBit\\CoreBundle\\Form\\Types\\Basic\\SwitchCheckType' => function () {
    return ${($_ = isset($this->services['qba_bit_core.form.basic.switch_check']) ? $this->services['qba_bit_core.form.basic.switch_check'] : $this->services['qba_bit_core.form.basic.switch_check'] = new \QbaBit\CoreBundle\Form\Types\Basic\SwitchCheckType($this)) && false ?: '_'};
}, 'QbaBit\\CoreBundle\\Form\\Types\\Collections\\GeneralCollectionType' => function () {
    return ${($_ = isset($this->services['qba_bit_core.form.collections.general']) ? $this->services['qba_bit_core.form.collections.general'] : $this->services['qba_bit_core.form.collections.general'] = new \QbaBit\CoreBundle\Form\Types\Collections\GeneralCollectionType($this)) && false ?: '_'};
}, 'QbaBit\\CoreBundle\\Form\\Types\\Collections\\GridViewType' => function () {
    return ${($_ = isset($this->services['qba_bit_core.form.collections.grid_view']) ? $this->services['qba_bit_core.form.collections.grid_view'] : $this->services['qba_bit_core.form.collections.grid_view'] = new \QbaBit\CoreBundle\Form\Types\Collections\GridViewType($this)) && false ?: '_'};
}, 'QbaBit\\CoreBundle\\Form\\Types\\Collections\\ListViewType' => function () {
    return ${($_ = isset($this->services['qba_bit_core.form.collections.list_view']) ? $this->services['qba_bit_core.form.collections.list_view'] : $this->services['qba_bit_core.form.collections.list_view'] = new \QbaBit\CoreBundle\Form\Types\Collections\ListViewType($this)) && false ?: '_'};
}, 'QbaBit\\CoreBundle\\Form\\Types\\Collections\\ModalTransferEntityType' => function () {
    return ${($_ = isset($this->services['qba_bit_core.form.collections.modal_transfer_entity']) ? $this->services['qba_bit_core.form.collections.modal_transfer_entity'] : $this->services['qba_bit_core.form.collections.modal_transfer_entity'] = new \QbaBit\CoreBundle\Form\Types\Collections\ModalTransferEntityType($this)) && false ?: '_'};
}, 'QbaBit\\LanguageBundle\\Form\\Admin\\LanguageType' => function () {
    return ${($_ = isset($this->services['qba_bit_language.forms.language']) ? $this->services['qba_bit_language.forms.language'] : $this->services['qba_bit_language.forms.language'] = new \QbaBit\LanguageBundle\Form\Admin\LanguageType($this)) && false ?: '_'};
}, 'QbaBit\\NautaBundle\\Form\\Admin\\NautaAccountsLogType' => function () {
    return ${($_ = isset($this->services['qba_bit.type.nauta.nauta.accounts.log']) ? $this->services['qba_bit.type.nauta.nauta.accounts.log'] : $this->services['qba_bit.type.nauta.nauta.accounts.log'] = new \QbaBit\NautaBundle\Form\Admin\NautaAccountsLogType($this)) && false ?: '_'};
}, 'QbaBit\\NautaBundle\\Form\\Admin\\NautaAccountsType' => function () {
    return ${($_ = isset($this->services['qba_bit.type.nauta.nauta.accounts']) ? $this->services['qba_bit.type.nauta.nauta.accounts'] : $this->services['qba_bit.type.nauta.nauta.accounts'] = new \QbaBit\NautaBundle\Form\Admin\NautaAccountsType($this)) && false ?: '_'};
}, 'QbaBit\\NautaBundle\\Form\\Admin\\NautaOptionsType' => function () {
    return ${($_ = isset($this->services['qba_bit.type.nauta.nauta.option']) ? $this->services['qba_bit.type.nauta.nauta.option'] : $this->services['qba_bit.type.nauta.nauta.option'] = new \QbaBit\NautaBundle\Form\Admin\NautaOptionsType($this)) && false ?: '_'};
}, 'QbaBit\\NautaBundle\\Form\\Admin\\NautaTipoCuentaType' => function () {
    return ${($_ = isset($this->services['qba_bit.type.nauta.nauta.tipo.cuenta']) ? $this->services['qba_bit.type.nauta.nauta.tipo.cuenta'] : $this->services['qba_bit.type.nauta.nauta.tipo.cuenta'] = new \QbaBit\NautaBundle\Form\Admin\NautaTipoCuentaType($this)) && false ?: '_'};
}, 'QbaBit\\NautaBundle\\Form\\Admin\\NautaUserIpType' => function () {
    return ${($_ = isset($this->services['qba_bit.type.nauta.nauta.user.ip']) ? $this->services['qba_bit.type.nauta.nauta.user.ip'] : $this->services['qba_bit.type.nauta.nauta.user.ip'] = new \QbaBit\NautaBundle\Form\Admin\NautaUserIpType($this)) && false ?: '_'};
}, 'QbaBit\\SecurityBundle\\Form\\Admin\\SecurityAccountType' => function () {
    return ${($_ = isset($this->services['qba_bit_security.forms.account_type']) ? $this->services['qba_bit_security.forms.account_type'] : $this->services['qba_bit_security.forms.account_type'] = new \QbaBit\SecurityBundle\Form\Admin\SecurityAccountType($this)) && false ?: '_'};
}, 'QbaBit\\SecurityBundle\\Form\\Admin\\SecurityGroupType' => function () {
    return ${($_ = isset($this->services['qba_bit_security.forms.group_user']) ? $this->services['qba_bit_security.forms.group_user'] : $this->services['qba_bit_security.forms.group_user'] = new \QbaBit\SecurityBundle\Form\Admin\SecurityGroupType($this)) && false ?: '_'};
}, 'QbaBit\\SecurityBundle\\Form\\Admin\\SecurityIpType' => function () {
    return ${($_ = isset($this->services['qba_bit_security.forms.ip_type']) ? $this->services['qba_bit_security.forms.ip_type'] : $this->services['qba_bit_security.forms.ip_type'] = new \QbaBit\SecurityBundle\Form\Admin\SecurityIpType($this)) && false ?: '_'};
}, 'QbaBit\\SecurityBundle\\Form\\Admin\\SecurityUserType' => function () {
    return ${($_ = isset($this->services['qba_bit_security.forms.user']) ? $this->services['qba_bit_security.forms.user'] : $this->services['qba_bit_security.forms.user'] = new \QbaBit\SecurityBundle\Form\Admin\SecurityUserType($this)) && false ?: '_'};
}, 'QbaBit\\SecurityBundle\\Form\\SecurityRecoveryType' => function () {
    return ${($_ = isset($this->services['qba_bit_security.forms.recovery_type']) ? $this->services['qba_bit_security.forms.recovery_type'] : $this->services['qba_bit_security.forms.recovery_type'] = new \QbaBit\SecurityBundle\Form\SecurityRecoveryType($this)) && false ?: '_'};
}, 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => function () {
    return ${($_ = isset($this->services['form.type.entity']) ? $this->services['form.type.entity'] : $this->load(__DIR__.'/getForm_Type_EntityService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => function () {
    return ${($_ = isset($this->services['form.type.choice']) ? $this->services['form.type.choice'] : $this->load(__DIR__.'/getForm_Type_ChoiceService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => function () {
    return ${($_ = isset($this->services['form.type.form']) ? $this->services['form.type.form'] : $this->load(__DIR__.'/getForm_Type_FormService.php')) && false ?: '_'};
})), array('Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.form.http_foundation']) ? $this->services['form.type_extension.form.http_foundation'] : $this->load(__DIR__.'/getForm_TypeExtension_Form_HttpFoundationService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_extension.form.validator']) ? $this->services['form.type_extension.form.validator'] : $this->load(__DIR__.'/getForm_TypeExtension_Form_ValidatorService.php')) && false ?: '_'};
    yield 2 => ${($_ = isset($this->services['form.type_extension.upload.validator']) ? $this->services['form.type_extension.upload.validator'] : $this->load(__DIR__.'/getForm_TypeExtension_Upload_ValidatorService.php')) && false ?: '_'};
    yield 3 => ${($_ = isset($this->services['form.type_extension.csrf']) ? $this->services['form.type_extension.csrf'] : $this->load(__DIR__.'/getForm_TypeExtension_CsrfService.php')) && false ?: '_'};
    yield 4 => ${($_ = isset($this->services['form.type_extension.form.data_collector']) ? $this->services['form.type_extension.form.data_collector'] : $this->load(__DIR__.'/getForm_TypeExtension_Form_DataCollectorService.php')) && false ?: '_'};
}, 5), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.repeated.validator']) ? $this->services['form.type_extension.repeated.validator'] : $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension()) && false ?: '_'};
}, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.submit.validator']) ? $this->services['form.type_extension.submit.validator'] : $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension()) && false ?: '_'};
}, 1)), new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_guesser.validator']) ? $this->services['form.type_guesser.validator'] : $this->load(__DIR__.'/getForm_TypeGuesser_ValidatorService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_guesser.doctrine']) ? $this->services['form.type_guesser.doctrine'] : $this->load(__DIR__.'/getForm_TypeGuesser_DoctrineService.php')) && false ?: '_'};
}, 2), NULL)), ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : $this->load(__DIR__.'/getForm_ResolvedTypeFactoryService.php')) && false ?: '_'});
